//
//Copyright 2020 The OpenEBS Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// After editing this file, run make protos. Minimum version should be 3.12

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.1
// source: ndm.proto

package ndm

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Hugepages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages int32 `protobuf:"varint,1,opt,name=pages,proto3" json:"pages,omitempty"`
}

func (x *Hugepages) Reset() {
	*x = Hugepages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hugepages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hugepages) ProtoMessage() {}

func (x *Hugepages) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hugepages.ProtoReflect.Descriptor instead.
func (*Hugepages) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{1}
}

func (x *Hugepages) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

type HugepagesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *HugepagesResult) Reset() {
	*x = HugepagesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HugepagesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HugepagesResult) ProtoMessage() {}

func (x *HugepagesResult) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HugepagesResult.ProtoReflect.Descriptor instead.
func (*HugepagesResult) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{2}
}

func (x *HugepagesResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type BlockDeviceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Compliance       string `protobuf:"bytes,1,opt,name=Compliance,proto3" json:"Compliance,omitempty"`
	Vendor           string `protobuf:"bytes,2,opt,name=Vendor,proto3" json:"Vendor,omitempty"`
	Model            string `protobuf:"bytes,3,opt,name=Model,proto3" json:"Model,omitempty"`
	SerialNumber     string `protobuf:"bytes,4,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	FirmwareRevision string `protobuf:"bytes,5,opt,name=FirmwareRevision,proto3" json:"FirmwareRevision,omitempty"`
	WWN              string `protobuf:"bytes,6,opt,name=WWN,proto3" json:"WWN,omitempty"`
	Capacity         uint64 `protobuf:"varint,7,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	LBSize           uint32 `protobuf:"varint,8,opt,name=LBSize,proto3" json:"LBSize,omitempty"`
	PBSize           uint32 `protobuf:"varint,9,opt,name=PBSize,proto3" json:"PBSize,omitempty"`
	RotationRate     uint32 `protobuf:"varint,10,opt,name=RotationRate,proto3" json:"RotationRate,omitempty"`
	ATAMajorVersion  string `protobuf:"bytes,11,opt,name=ATAMajorVersion,proto3" json:"ATAMajorVersion,omitempty"`
	ATAMinorVersion  string `protobuf:"bytes,12,opt,name=ATAMinorVersion,proto3" json:"ATAMinorVersion,omitempty"`
	AtaTransport     string `protobuf:"bytes,13,opt,name=AtaTransport,proto3" json:"AtaTransport,omitempty"`
}

func (x *BlockDeviceDetails) Reset() {
	*x = BlockDeviceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDeviceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDeviceDetails) ProtoMessage() {}

func (x *BlockDeviceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDeviceDetails.ProtoReflect.Descriptor instead.
func (*BlockDeviceDetails) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{3}
}

func (x *BlockDeviceDetails) GetCompliance() string {
	if x != nil {
		return x.Compliance
	}
	return ""
}

func (x *BlockDeviceDetails) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *BlockDeviceDetails) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *BlockDeviceDetails) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *BlockDeviceDetails) GetFirmwareRevision() string {
	if x != nil {
		return x.FirmwareRevision
	}
	return ""
}

func (x *BlockDeviceDetails) GetWWN() string {
	if x != nil {
		return x.WWN
	}
	return ""
}

func (x *BlockDeviceDetails) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *BlockDeviceDetails) GetLBSize() uint32 {
	if x != nil {
		return x.LBSize
	}
	return 0
}

func (x *BlockDeviceDetails) GetPBSize() uint32 {
	if x != nil {
		return x.PBSize
	}
	return 0
}

func (x *BlockDeviceDetails) GetRotationRate() uint32 {
	if x != nil {
		return x.RotationRate
	}
	return 0
}

func (x *BlockDeviceDetails) GetATAMajorVersion() string {
	if x != nil {
		return x.ATAMajorVersion
	}
	return ""
}

func (x *BlockDeviceDetails) GetATAMinorVersion() string {
	if x != nil {
		return x.ATAMinorVersion
	}
	return ""
}

func (x *BlockDeviceDetails) GetAtaTransport() string {
	if x != nil {
		return x.AtaTransport
	}
	return ""
}

type BlockDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type can be Disk, Loop, LVM, etc
	Type       string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Partitions []string `protobuf:"bytes,3,rep,name=partitions,proto3" json:"partitions,omitempty"` // Other fields about disk can be added here
}

func (x *BlockDevice) Reset() {
	*x = BlockDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDevice) ProtoMessage() {}

func (x *BlockDevice) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDevice.ProtoReflect.Descriptor instead.
func (*BlockDevice) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{4}
}

func (x *BlockDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockDevice) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BlockDevice) GetPartitions() []string {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type BlockDevices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blockdevices []*BlockDevice `protobuf:"bytes,1,rep,name=blockdevices,proto3" json:"blockdevices,omitempty"`
}

func (x *BlockDevices) Reset() {
	*x = BlockDevices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDevices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDevices) ProtoMessage() {}

func (x *BlockDevices) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDevices.ProtoReflect.Descriptor instead.
func (*BlockDevices) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{5}
}

func (x *BlockDevices) GetBlockdevices() []*BlockDevice {
	if x != nil {
		return x.Blockdevices
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{6}
}

func (x *Status) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	GitCommit string `protobuf:"bytes,2,opt,name=GitCommit,proto3" json:"GitCommit,omitempty"`
}

func (x *VersionInfo) Reset() {
	*x = VersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInfo) ProtoMessage() {}

func (x *VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInfo.ProtoReflect.Descriptor instead.
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{7}
}

func (x *VersionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionInfo) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

type NodeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
}

func (x *NodeName) Reset() {
	*x = NodeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeName) ProtoMessage() {}

func (x *NodeName) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeName.ProtoReflect.Descriptor instead.
func (*NodeName) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{8}
}

func (x *NodeName) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Null) Reset() {
	*x = Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Null) ProtoMessage() {}

func (x *Null) ProtoReflect() protoreflect.Message {
	mi := &file_ndm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Null.ProtoReflect.Descriptor instead.
func (*Null) Descriptor() ([]byte, []int) {
	return file_ndm_proto_rawDescGZIP(), []int{9}
}

var File_ndm_proto protoreflect.FileDescriptor

var file_ndm_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6e, 0x64, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6e, 0x64, 0x6d,
	0x22, 0x1b, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x21, 0x0a,
	0x09, 0x48, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x29, 0x0a, 0x0f, 0x48, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xac, 0x03, 0x0a, 0x12,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x57, 0x57, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x57,
	0x57, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x4c, 0x42, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x4c, 0x42, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x42, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x42, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x54, 0x41, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x54, 0x41,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x41, 0x54, 0x41, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x54, 0x41, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x74, 0x61, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x74,
	0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x55, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x44, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x45, 0x0a, 0x0b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x22, 0x26, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x06, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c,
	0x32, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x1a, 0x10, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x32, 0xca, 0x02, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x09, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x1a, 0x0d, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x09, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x11,
	0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x0b, 0x49, 0x53, 0x43, 0x53, 0x49, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x09, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x0b, 0x2e, 0x6e, 0x64,
	0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x10, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x17, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x34, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x48, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0e, 0x2e,
	0x6e, 0x64, 0x6d, 0x2e, 0x48, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x14, 0x2e,
	0x6e, 0x64, 0x6d, 0x2e, 0x48, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x48, 0x75, 0x67, 0x65, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x09, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x0e,
	0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x48, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x09, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x1a, 0x0c, 0x2e, 0x6e, 0x64, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0a, 0x5a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x6e, 0x64, 0x6d, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ndm_proto_rawDescOnce sync.Once
	file_ndm_proto_rawDescData = file_ndm_proto_rawDesc
)

func file_ndm_proto_rawDescGZIP() []byte {
	file_ndm_proto_rawDescOnce.Do(func() {
		file_ndm_proto_rawDescData = protoimpl.X.CompressGZIP(file_ndm_proto_rawDescData)
	})
	return file_ndm_proto_rawDescData
}

var file_ndm_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_ndm_proto_goTypes = []interface{}{
	(*Message)(nil),            // 0: ndm.Message
	(*Hugepages)(nil),          // 1: ndm.Hugepages
	(*HugepagesResult)(nil),    // 2: ndm.HugepagesResult
	(*BlockDeviceDetails)(nil), // 3: ndm.BlockDeviceDetails
	(*BlockDevice)(nil),        // 4: ndm.BlockDevice
	(*BlockDevices)(nil),       // 5: ndm.BlockDevices
	(*Status)(nil),             // 6: ndm.Status
	(*VersionInfo)(nil),        // 7: ndm.VersionInfo
	(*NodeName)(nil),           // 8: ndm.NodeName
	(*Null)(nil),               // 9: ndm.Null
}
var file_ndm_proto_depIdxs = []int32{
	4, // 0: ndm.BlockDevices.blockdevices:type_name -> ndm.BlockDevice
	9, // 1: ndm.Info.FindVersion:input_type -> ndm.Null
	9, // 2: ndm.Node.Name:input_type -> ndm.Null
	9, // 3: ndm.Node.ListBlockDevices:input_type -> ndm.Null
	9, // 4: ndm.Node.ISCSIStatus:input_type -> ndm.Null
	4, // 5: ndm.Node.ListBlockDeviceDetails:input_type -> ndm.BlockDevice
	1, // 6: ndm.Node.SetHugepages:input_type -> ndm.Hugepages
	9, // 7: ndm.Node.GetHugepages:input_type -> ndm.Null
	9, // 8: ndm.Node.Rescan:input_type -> ndm.Null
	7, // 9: ndm.Info.FindVersion:output_type -> ndm.VersionInfo
	8, // 10: ndm.Node.Name:output_type -> ndm.NodeName
	5, // 11: ndm.Node.ListBlockDevices:output_type -> ndm.BlockDevices
	6, // 12: ndm.Node.ISCSIStatus:output_type -> ndm.Status
	3, // 13: ndm.Node.ListBlockDeviceDetails:output_type -> ndm.BlockDeviceDetails
	2, // 14: ndm.Node.SetHugepages:output_type -> ndm.HugepagesResult
	1, // 15: ndm.Node.GetHugepages:output_type -> ndm.Hugepages
	0, // 16: ndm.Node.Rescan:output_type -> ndm.Message
	9, // [9:17] is the sub-list for method output_type
	1, // [1:9] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ndm_proto_init() }
func file_ndm_proto_init() {
	if File_ndm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ndm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hugepages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HugepagesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockDeviceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockDevices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ndm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ndm_proto_goTypes,
		DependencyIndexes: file_ndm_proto_depIdxs,
		MessageInfos:      file_ndm_proto_msgTypes,
	}.Build()
	File_ndm_proto = out.File
	file_ndm_proto_rawDesc = nil
	file_ndm_proto_goTypes = nil
	file_ndm_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoClient interface {
	// FindVersion Method gets the version information of the NDM components installed
	FindVersion(ctx context.Context, in *Null, opts ...grpc.CallOption) (*VersionInfo, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) FindVersion(ctx context.Context, in *Null, opts ...grpc.CallOption) (*VersionInfo, error) {
	out := new(VersionInfo)
	err := c.cc.Invoke(ctx, "/ndm.Info/FindVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
type InfoServer interface {
	// FindVersion Method gets the version information of the NDM components installed
	FindVersion(context.Context, *Null) (*VersionInfo, error)
}

// UnimplementedInfoServer can be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (*UnimplementedInfoServer) FindVersion(context.Context, *Null) (*VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindVersion not implemented")
}

func RegisterInfoServer(s *grpc.Server, srv InfoServer) {
	s.RegisterService(&_Info_serviceDesc, srv)
}

func _Info_FindVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).FindVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ndm.Info/FindVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).FindVersion(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

var _Info_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ndm.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindVersion",
			Handler:    _Info_FindVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ndm.proto",
}

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	// Name method is used find the name of the node on which NDM is running on
	Name(ctx context.Context, in *Null, opts ...grpc.CallOption) (*NodeName, error)
	// ListBlockDevices method is used to return all the block devices found in hierarchy by NDM
	ListBlockDevices(ctx context.Context, in *Null, opts ...grpc.CallOption) (*BlockDevices, error)
	// ISCSIStatus method returns status of ISCSI
	ISCSIStatus(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Status, error)
	// ListBlockDeviceDetails method is used to find SMART info about a block device.
	// Only the name field is required for input
	ListBlockDeviceDetails(ctx context.Context, in *BlockDevice, opts ...grpc.CallOption) (*BlockDeviceDetails, error)
	// SetHugepages sets 2MB hugePages on this node.
	// Note: Calling this method doesn't guarantee that the said number of pages will be set.
	// This is because OS might not have the demanded memory. It would be best to check if this is satisfied with GetHugePages
	SetHugepages(ctx context.Context, in *Hugepages, opts ...grpc.CallOption) (*HugepagesResult, error)
	// GetHugepages gets the number of huge pages set on the node
	GetHugepages(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Hugepages, error)
	// Rescan syncs etcd and NDM's local state
	Rescan(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Message, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Name(ctx context.Context, in *Null, opts ...grpc.CallOption) (*NodeName, error) {
	out := new(NodeName)
	err := c.cc.Invoke(ctx, "/ndm.Node/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListBlockDevices(ctx context.Context, in *Null, opts ...grpc.CallOption) (*BlockDevices, error) {
	out := new(BlockDevices)
	err := c.cc.Invoke(ctx, "/ndm.Node/ListBlockDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ISCSIStatus(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ndm.Node/ISCSIStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListBlockDeviceDetails(ctx context.Context, in *BlockDevice, opts ...grpc.CallOption) (*BlockDeviceDetails, error) {
	out := new(BlockDeviceDetails)
	err := c.cc.Invoke(ctx, "/ndm.Node/ListBlockDeviceDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SetHugepages(ctx context.Context, in *Hugepages, opts ...grpc.CallOption) (*HugepagesResult, error) {
	out := new(HugepagesResult)
	err := c.cc.Invoke(ctx, "/ndm.Node/SetHugepages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetHugepages(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Hugepages, error) {
	out := new(Hugepages)
	err := c.cc.Invoke(ctx, "/ndm.Node/GetHugepages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Rescan(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/ndm.Node/Rescan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	// Name method is used find the name of the node on which NDM is running on
	Name(context.Context, *Null) (*NodeName, error)
	// ListBlockDevices method is used to return all the block devices found in hierarchy by NDM
	ListBlockDevices(context.Context, *Null) (*BlockDevices, error)
	// ISCSIStatus method returns status of ISCSI
	ISCSIStatus(context.Context, *Null) (*Status, error)
	// ListBlockDeviceDetails method is used to find SMART info about a block device.
	// Only the name field is required for input
	ListBlockDeviceDetails(context.Context, *BlockDevice) (*BlockDeviceDetails, error)
	// SetHugepages sets 2MB hugePages on this node.
	// Note: Calling this method doesn't guarantee that the said number of pages will be set.
	// This is because OS might not have the demanded memory. It would be best to check if this is satisfied with GetHugePages
	SetHugepages(context.Context, *Hugepages) (*HugepagesResult, error)
	// GetHugepages gets the number of huge pages set on the node
	GetHugepages(context.Context, *Null) (*Hugepages, error)
	// Rescan syncs etcd and NDM's local state
	Rescan(context.Context, *Null) (*Message, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) Name(context.Context, *Null) (*NodeName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (*UnimplementedNodeServer) ListBlockDevices(context.Context, *Null) (*BlockDevices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockDevices not implemented")
}
func (*UnimplementedNodeServer) ISCSIStatus(context.Context, *Null) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ISCSIStatus not implemented")
}
func (*UnimplementedNodeServer) ListBlockDeviceDetails(context.Context, *BlockDevice) (*BlockDeviceDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockDeviceDetails not implemented")
}
func (*UnimplementedNodeServer) SetHugepages(context.Context, *Hugepages) (*HugepagesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHugepages not implemented")
}
func (*UnimplementedNodeServer) GetHugepages(context.Context, *Null) (*Hugepages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHugepages not implemented")
}
func (*UnimplementedNodeServer) Rescan(context.Context, *Null) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rescan not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ndm.Node/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Name(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListBlockDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListBlockDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ndm.Node/ListBlockDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListBlockDevices(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ISCSIStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ISCSIStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ndm.Node/ISCSIStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ISCSIStatus(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListBlockDeviceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListBlockDeviceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ndm.Node/ListBlockDeviceDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListBlockDeviceDetails(ctx, req.(*BlockDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SetHugepages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hugepages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SetHugepages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ndm.Node/SetHugepages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SetHugepages(ctx, req.(*Hugepages))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetHugepages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetHugepages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ndm.Node/GetHugepages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetHugepages(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Rescan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Rescan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ndm.Node/Rescan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Rescan(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ndm.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _Node_Name_Handler,
		},
		{
			MethodName: "ListBlockDevices",
			Handler:    _Node_ListBlockDevices_Handler,
		},
		{
			MethodName: "ISCSIStatus",
			Handler:    _Node_ISCSIStatus_Handler,
		},
		{
			MethodName: "ListBlockDeviceDetails",
			Handler:    _Node_ListBlockDeviceDetails_Handler,
		},
		{
			MethodName: "SetHugepages",
			Handler:    _Node_SetHugepages_Handler,
		},
		{
			MethodName: "GetHugepages",
			Handler:    _Node_GetHugepages_Handler,
		},
		{
			MethodName: "Rescan",
			Handler:    _Node_Rescan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ndm.proto",
}
