# Copyright 2018-2020 The OpenEBS Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: build

on: ['push']

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Shellcheck
        uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          path: '.'
          pattern: '*.sh'
          exclude: './.git/*,./vendor/*'

      - name: License Check
        run: make license-check

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: make install-dep

      - name: Unit test
        # Here sudo permissions are required for running tests, since we are making use
        # of scsi device mockdata in smartprobe_test.
        # To access a particular scsi device to fetch this information, sudo or root
        # permissions are required.
        run: sudo -E env "PATH=$PATH" make test

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v1

  ndm-daemonset:
    runs-on: ubuntu-latest
    needs: ['lint', 'unit-test']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Image Org
        # sets the default IMAGE_ORG to openebs
        run: |
          [ -z "${{ secrets.IMAGE_ORG }}" ] && IMAGE_ORG=openebs || IMAGE_ORG=${{ secrets.IMAGE_ORG}}
          echo "IMAGE_ORG=${IMAGE_ORG}" >> $GITHUB_ENV

      - name: Set CI Tag
        run: |
          BRANCH="${GITHUB_REF##*/}"
          CI_TAG=${BRANCH#v}-ci
          if [ ${BRANCH} = "master" ]; then
            CI_TAG="ci"
          fi
          echo "TAG=${CI_TAG}" >> $GITHUB_ENV

      - name: Set Build Date
        id: date
        run: |
          echo "::set-output name=DATE::$(date -u +'%Y-%m-%dT%H:%M:%S%Z')"

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          # add each registry to which the image needs to be pushed here
          images: |
            ${{ env.IMAGE_ORG }}/node-disk-manager
            quay.io/${{ env.IMAGE_ORG }}/node-disk-manager
          tag-latest: false
          tag-custom-only: true
          tag-custom: |
            ${{ env.TAG }}

      - name: Print Tags
        run: |
          echo "${{ steps.docker_meta.outputs.tags }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: v0.5.1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Build & Push Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./build/ndm-daemonset/Dockerfile
          push: true
          platforms: linux/amd64, linux/arm64, linux/arm/v7, linux/ppc64le
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
          build-args: |
            DBUILD_DATE=${{ steps.date.outputs.DATE }}
            DBUILD_REPO_URL=https://github.com/openebs/node-disk-manager
            DBUILD_SITE_URL=https://openebs.io

  ndm-exporter:
    runs-on: ubuntu-latest
    needs: ['lint', 'unit-test']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Image Org
        # sets the default IMAGE_ORG to openebs
        run: |
          [ -z "${{ secrets.IMAGE_ORG }}" ] && IMAGE_ORG=openebs || IMAGE_ORG=${{ secrets.IMAGE_ORG}}
          echo "IMAGE_ORG=${IMAGE_ORG}" >> $GITHUB_ENV

      - name: Set CI Tag
        run: |
          BRANCH="${GITHUB_REF##*/}"
          CI_TAG=${BRANCH#v}-ci
          if [ ${BRANCH} = "master" ]; then
            CI_TAG="ci"
          fi
          echo "TAG=${CI_TAG}" >> $GITHUB_ENV

      - name: Set Build Date
        id: date
        run: |
          echo "::set-output name=DATE::$(date -u +'%Y-%m-%dT%H:%M:%S%Z')"

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          # add each registry to which the image needs to be pushed here
          images: |
            ${{ env.IMAGE_ORG }}/node-disk-exporter
            quay.io/${{ env.IMAGE_ORG }}/node-disk-exporter
          tag-latest: false
          tag-custom-only: true
          tag-custom: |
            ${{ env.TAG }}

      - name: Print Tags
        run: |
          echo "${{ steps.docker_meta.outputs.tags }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: v0.5.1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Build & Push Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./build/ndm-exporter/Dockerfile
          push: true
          platforms: linux/amd64, linux/arm64, linux/arm/v7, linux/ppc64le
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
          build-args: |
            DBUILD_DATE=${{ steps.date.outputs.DATE }}
            DBUILD_REPO_URL=https://github.com/openebs/node-disk-manager
            DBUILD_SITE_URL=https://openebs.io

  ndm-operator:
    runs-on: ubuntu-latest
    needs: ['lint', 'unit-test']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Image Org
        # sets the default IMAGE_ORG to openebs
        run: |
          [ -z "${{ secrets.IMAGE_ORG }}" ] && IMAGE_ORG=openebs || IMAGE_ORG=${{ secrets.IMAGE_ORG}}
          echo "IMAGE_ORG=${IMAGE_ORG}" >> $GITHUB_ENV

      - name: Set CI Tag
        run: |
          BRANCH="${GITHUB_REF##*/}"
          CI_TAG=${BRANCH#v}-ci
          if [ ${BRANCH} = "master" ]; then
            CI_TAG="ci"
          fi
          echo "TAG=${CI_TAG}" >> $GITHUB_ENV

      - name: Set Build Date
        id: date
        run: |
          echo "::set-output name=DATE::$(date -u +'%Y-%m-%dT%H:%M:%S%Z')"

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          # add each registry to which the image needs to be pushed here
          images: |
            ${{ env.IMAGE_ORG }}/node-disk-operator
            quay.io/${{ env.IMAGE_ORG }}/node-disk-operator
          tag-latest: false
          tag-custom-only: true
          tag-custom: |
            ${{ env.TAG }}

      - name: Print Tags
        run: |
          echo "${{ steps.docker_meta.outputs.tags }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: v0.5.1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Build & Push Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./build/ndm-operator/Dockerfile
          push: true
          platforms: linux/amd64, linux/arm64, linux/arm/v7, linux/ppc64le
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
          build-args: |
            DBUILD_DATE=${{ steps.date.outputs.DATE }}
            DBUILD_REPO_URL=https://github.com/openebs/node-disk-manager
            DBUILD_SITE_URL=https://openebs.io

  integration-test:
    runs-on: ubuntu-latest
    # ndm exporter is not needed here as the integration tests do not use exporter
    # since the multiplatform images are not used for testing, the image will be rebuilt and then used
    # needs: ['ndm-daemonset', 'ndm-operator']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Minikube-Kubernetes
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: v1.15.0
          kubernetes version: 1.18.0

      - name: Install Dependencies
        run: make install-dep

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: v0.5.1

      - name: Build Node Disk Manager
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./build/ndm-daemonset/Dockerfile
          push: false
          load: true
          platforms: linux/amd64
          tags: |
            openebs/node-disk-manager:ci

      - name: Build Node Disk Operator
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./build/ndm-operator/Dockerfile
          push: false
          load: true
          platforms: linux/amd64
          tags: |
            openebs/node-disk-operator:ci

      - name: Integration Test
        run: sudo -E env "PATH=$PATH" make integration-test
