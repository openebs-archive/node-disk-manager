/*
Copyright 2018 OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import apis "github.com/openebs/node-disk-manager/pkg/apis/openebs.io/v1alpha1"

// DiskInfo contains details of a disk which can be converted into api.Disk
type DiskInfo struct {
	ProbeIdentifiers ProbeIdentifier // ProbeIdentifiers contains some keys to uniquely identify each disk by probe
	HostName         string          // HostName contains the node's hostname in which this disk is attached.
	Uuid             string          // Uuid is the unique id given by ndm
	Capacity         uint64          // Capacity is capacity of a disk
	Model            string          // Model is model no of a disk
	Serial           string          // Serial is serial no of a disk
	Vendor           string          // Vendor is vendor of a disk
	Path             string          // Path is dev path of a disk like /dev/sda
}

// ProbeIdentifiers contains some keys to uniquely identify each disk by probe
type ProbeIdentifier struct {
	Uuid           string // Uuid is uid of disk which is generated by udev probe.
	UdevIdentifier string // UdevIdentifier(syspath) used to identify disk by udevprobe.
}

// NewDiskInfo returns a pointer of empty diskInfo struct which will
// be field by different probes each probe will responsible for
// populate some specific fields of DiskInfo struct.
func NewDiskInfo() *DiskInfo {
	diskInfo := &DiskInfo{}
	return diskInfo
}

// ToDisk convert diskInfo struct to api.Disk type which will be pushed to etcd
func (di *DiskInfo) ToDisk() apis.Disk {
	obj := apis.DiskSpec{Path: di.Path}
	obj.Capacity.Storage = di.Capacity
	obj.Details.Model = di.Model
	obj.Details.Serial = di.Serial
	obj.Details.Vendor = di.Vendor
	dr := apis.Disk{Spec: obj}
	dr.ObjectMeta.Labels = make(map[string]string)
	dr.ObjectMeta.Name = di.Uuid
	dr.ObjectMeta.Labels[NDMHostKey] = di.HostName
	dr.TypeMeta.Kind = NDMKind
	dr.TypeMeta.APIVersion = NDMVersion
	dr.Status.State = NDMActive
	return dr
}
